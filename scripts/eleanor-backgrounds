#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division, print_function

import os
import glob
import tqdm
import fitsio
import numpy as np
from functools import partial
from sklearn.decomposition import PCA

from scipy.signal import medfilt2d
from scipy.interpolate import interp1d

from multiprocessing import Pool

from eleanor_tools import fill_grid

# Pre-compute the low pass filter
fc = 0.12
b = 0.08
N = int(np.ceil((4 / b)))
if not N % 2:
    N += 1
n = np.arange(N)
sinc_func = np.sinc(2 * fc * (n - (N - 1) / 2.0))
window = 0.42 - 0.5 * np.cos(2 * np.pi * n / (N - 1))
window += 0.08 * np.cos(4 * np.pi * n / (N - 1))
sinc_func = sinc_func * window
sinc_func = sinc_func / np.sum(sinc_func)


def lowpass(vec, axis=-1):
    new_signal = np.convolve(vec, sinc_func)
    lns = len(new_signal)
    diff = int(
        np.abs(lns - len(vec)) / 2
    )  # low pass filter to remove high order modes
    return new_signal[diff:-diff]


def do_pca(i, j, data, factor, q):
    xvals = np.dot(factor, data[i, j, :][q])
    return xvals


def calc_2dbkg(flux, qual, time, fast=True):
    flux = np.ascontiguousarray(np.moveaxis(flux, 0, -1), dtype=np.float64)

    q = qual == 0

    nonzero = (flux.sum(axis=(0,1)) != 0)
    # build a single frame in shape of detector.
    # This was once the median image, not sure why it was changed
    med = np.percentile(flux[:, :, nonzero], 1, axis=(2))

    # subtract off median to remove stable background emission, which is
    # especially apparent in corners
    med = med - medfilt2d(med, 25)

    # mask which should separate pixels dominated by starlight from background
    g = np.ma.masked_where(med < np.percentile(med, 70.0), med)

    modes = 21
    X = np.ascontiguousarray(flux[g.mask][:, q])
    np.random.seed(42)
    pca = PCA(n_components=modes, svd_solver="randomized")
    pca.fit(X)
    pv = pca.components_[0:modes]
    pvT = np.ascontiguousarray(pv.T)

    rolls = list(range(-15, 15, 6))
    N = pv.shape[1]
    vv = np.zeros((N, modes * (1 + len(rolls)) + 1), dtype=np.float64)
    vv[:, :modes] = pvT
    vv[:, -1] = 1.0
    for j, i in enumerate(rolls):
        if i != 0:
            if i > 0:
                vv[i:, (j + 1) * modes : (j + 2) * modes] = pvT[:-i]
            else:
                vv[:i, (j + 1) * modes : (j + 2) * modes] = pvT[-i:]

    vvT = vv.T
    factor = np.linalg.solve(np.dot(vvT, vv), vvT)

    nx, ny = flux.shape[:2]
    nv = vv.shape[1]
    data = np.empty((nx, ny, nv))
    data[:] = np.nan
    data[g.mask] = np.dot(X, factor.T, out=data[g.mask])

    outmeasure = np.nansum(
        np.abs(data - np.nanmean(data, axis=(0, 1)))
        / np.nanstd(data, axis=(0, 1)),
        axis=-1,
    )

    # these eigenvectors give a bad fit when something astrophysical happens
    # to these pixels, like a bright asteroid crossing the FOV. Isolate these
    # pixels and add them into the mask of pixels we don't use
    mask = ~g.mask

    metric = outmeasure / data.shape[-1]
    mask[metric > 1] = True

    x = np.arange(0, data.shape[1])
    y = np.arange(0, data.shape[0])

    xx, yy = np.meshgrid(x, y)

    count = np.zeros(data.shape[:2], dtype=np.int32)
    for i in range(np.shape(vv)[1]):
        fill_grid.fill_grid(data[:, :, i], ~mask, count)

    bkg_arr = np.zeros_like(flux)
    bkg_arr[:, :, q] = np.dot(data, vv.T)
    for i in range(nx):
        for j in range(ny):
            bkg_arr[i, j, q] = lowpass(bkg_arr[i, j, q])

    f = interp1d(
        time[q],
        bkg_arr[:, :, q],
        kind="linear",
        axis=2,
        bounds_error=False,
        fill_value="extrapolate",
    )  # then interpolate the background smoothly across
    bkg_arr[:, :, ~q] = f(
        time[~q]
    )  # all times, where we've only been learning with the good quality cadences

    return np.asfortranarray(np.moveaxis(bkg_arr, -1, 0), dtype=np.float32)


def do_background(fn, fast=True, suffix="_bkg"):
    base, ext = os.path.splitext(fn)
    if base.endswith("_pc"):
        base = base[:-3]
    new_filename = base + suffix + ext

    with fitsio.FITS(fn) as fits:
        hdr = fits[1].read_header()
        tbl = fits[1].read()
        bkg = calc_2dbkg(
            fits[2].read(), tbl["QUALITY"], tbl["TSTART"], fast=fast
        )

    hdr["IS_BKG"] = True
    with fitsio.FITS(new_filename, "rw", clobber=True) as fits:
        fits.write(None)
        fits.write(bkg, header=dict(hdr))


def run_sector_camera_chip(
    base_dir, sector, camera, chip, threads=1, fast=True, suffix="_bkg"
):
    postdir = os.path.join(
        base_dir, "s{0:04d}".format(sector), "{0:d}-{1:d}".format(camera, chip)
    )
    pattern = os.path.join(
        postdir,
        "hlsp_eleanor_tess_ffi_postcard-s{0:04d}-{1:d}-{2:d}-cal-*-*[0-9]_pc.fits".format(
            sector, camera, chip
        ),
    )

    # pattern = os.path.join(postdir, "hlsp_eleanor_*.fits")

    fns = list(sorted(glob.glob(pattern)))
    if len(fns) == 0:
        # Fall back on old file name convention
        pattern = os.path.join(
            postdir,
            "hlsp_eleanor_tess_ffi_postcard-s{0:04d}-{1:d}-{2:d}-cal-*-*[0-9].fits".format(
                sector, camera, chip
            ),
        )
        fns = list(sorted(glob.glob(pattern)))

    # Ensures no postcards have been repeated
    fns = np.unique(fns)

    # Writes in the background after making the postcards
    print("Computing backgrounds...")
    func = partial(do_background, fast=fast, suffix=suffix)
    if threads > 1:
        with Pool(threads) as pool:
            list(tqdm.tqdm(pool.map(func, fns), total=len(fns)))
    else:
        list(tqdm.tqdm(map(func, fns), total=len(fns)))


if __name__ == "__main__":
    import io
    import sys
    import time
    import pstats
    import argparse
    import cProfile

    parser = argparse.ArgumentParser(
        description="Create backgrounds from a list of postcards"
    )
    parser.add_argument("sector", type=int, help="the sector number")
    parser.add_argument("base_dir", type=str, help="the base data directory")
    parser.add_argument(
        "--camera", type=int, default=None, help="the camera number"
    )
    parser.add_argument(
        "--chip", type=int, default=None, help="the chip number"
    )
    parser.add_argument(
        "--threads",
        type=int,
        default=1,
        help="the number of threads to run in parallel",
    )
    parser.add_argument(
        "--slow",
        action="store_true",
        help="use the old slower version of the interpolation",
    )
    parser.add_argument(
        "--suffix",
        type=str,
        default="_bkg",
        help="use the old slower version of the interpolation",
    )
    parser.add_argument(
        "--profile", action="store_true", help="profile the code"
    )
    args = parser.parse_args()

    if args.sector <= 0:
        if args.profile:
            pr = cProfile.Profile()
            pr.enable()

        strt = time.time()
        do_background(args.base_dir, fast=not args.slow, suffix=args.suffix)
        end = time.time()

        if args.profile:
            pr.disable()
            s = io.StringIO()
            ps = pstats.Stats(pr, stream=s).sort_stats("cumulative")
            ps.print_stats()
            print(s.getvalue())

        print("Took {0} seconds".format(end - strt))
        sys.exit(0)

    if args.camera is None:
        cameras = [1, 2, 3, 4]
    else:
        assert int(args.camera) in [1, 2, 3, 4]
        cameras = [int(args.camera)]

    if args.chip is None:
        chips = [1, 2, 3, 4]
    else:
        assert int(args.chip) in [1, 2, 3, 4]
        chips = [int(args.chip)]

    for camera in cameras:
        for chip in chips:
            print("Running {0:04d}-{1}-{2}".format(args.sector, camera, chip))
            run_sector_camera_chip(
                args.base_dir,
                args.sector,
                camera,
                chip,
                threads=args.threads,
                fast=not args.slow,
                suffix=args.suffix,
            )
